1.创建版本控制库
	1.创建环境，选择好目录 输入命令git init
	2.把一个文件放到git仓库
		1.git add  告诉git，把文件添加到仓库
		2.git commit 告诉git,把文件提交到仓库
		3.git commit -m，-m后面输入的是对本次提交的说明
小结：综上所述
2.查看文件状态
	1.git status命令可以让我们时刻掌握仓库当前的状态。
	2.git diff查看difference，显示的格式正是Unix通用的diff格式，
小结：1.要随时掌握工作区的状态，使用git status命令。
	  2.如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
3.版本回退
	1.在Git中，我们用git log命令查看
	2.如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：git log --pretty=oneline
	3.在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	4.把当前版本回退到上一个版本就可以使用git reset命令：git reset --hard HEAD^
	5.Git提供了一个命令git reflog用来记录你的每一次命令
小结：
	1.HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	2.穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	3.要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
4.工作区和暂存区
	1.工作区，就是电脑中的项目的目录
	2.版本库，在工作区隐藏的.git是git的版本库
		1.版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区
		2.还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
		3.创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
		4.增加文件之后并使用 git add filename之后 新文件就会被加载到暂存区,知道使用git commit提交的时候新文件才会添加到master中
小结:暂存区是Git非常重要的概念，弄明白了暂存区，就弄明白了Git的很多操作到底干了什么。
5.管理修改:Git跟踪并管理的是修改，而非文件。
小结：每次修改，如果不add到暂存区，那就不会加入到commit中。
6.撤销修改
	1.命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
		1.一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		2.一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
		3.总之，就是让这个文件回到最近一次git commit或git add时的状态。
	2.Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
	3.git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
小结：	1.场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		2.场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
		3.场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
7.删除文件
	1.Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了
	2.你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
	3.另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
		git checkout -- test.txt
	4.git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
小结：命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，
	你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
8.远程仓库
	1.要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
	2.关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	3.此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
小结：分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，
		再把本地提交推送一下就完成了同步。
9.从远程库克隆
	1.要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
	2.Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
10.创建与合并分支
	1.查看分支：git branch
	2.创建分支：git branch <name>
	3.切换分支：git checkout <name>
	4.创建+切换分支：git checkout -b <name>
	5.合并某分支到当前分支：git merge <name>
	6.删除分支：git branch -d <name>
11.解决冲突
	1.Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
	2.用git log --graph命令可以看到分支合并图
小结：当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
12.分支管理策略
	1.通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
	2.如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
	3.分之策略：
		1.首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
		2.干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
		3.你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
小结：合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
13.bug分支
	1.Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
	2.在需要修复bug的分支上创建临时分支，修复返程后回到刚才分支并删除临时分支
	3.修复返程后利用 git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
	4.另一种方式是用git stash pop，恢复的同时把stash内容也删了
	5.可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
		git stash apply stash@{0}
小结：	1.修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
		2.当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
14.Feature分支
	1.每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
	2.当新分支没有被合并如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。
小结：	1.开发一个新feature，最好新建一个分支；
		2.如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
15.多人协作
	1.要查看远程库的信息，用git remote;或者，用git remote -v显示更详细的信息
	2.推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上
	3.抓取分支：
		1.先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送
		2.git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接
		3.git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push
	4.多人协作的工作模式通常是这样
		1.首先，可以试图用git push origin branch-name推送自己的修改；
		2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		3.如果合并有冲突，则解决冲突，并在本地提交；
		4.有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		5.如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
			用命令git branch --set-upstream branch-name origin/branch-name
小结：	1.查看远程库信息，使用git remote -v；
		2.本地新建的分支如果不推送到远程，对其他人就是不可见的；
		3.从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
		4.在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
		5.建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
		6.从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
16.标签管理
	1.发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本
	2.将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
	3.Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。
	4.创建标签：
		1.首先，切换到需要打标签的分支上
		2.然后，敲命令git tag <name>就可以打一个新标签
		3.可以用命令git tag查看所有标签
	5.默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
	6.方法是找到历史提交的commit id，然后打上就可以了：比方说要对add merge这次提交打标签，它对应的commit id是6224937，敲入命令
		git tag v0.9 6224937
	7.用命令git show <tagname>可以看到说明文字
小结：	1.命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
		2.git tag -a <tagname> -m "blablabla..."可以指定标签信息；
		3.git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
		4.命令git tag可以查看所有标签。
17.操作标签
	1.如果标签打错了，也可以删除：git tag -d <tagname>
	2.如果要推送某个标签到远程，使用命令git push <your origin name> <tagname>
	3.或者，一次性推送全部尚未推送到远程的本地标签：
		git push <your origin name> --tags
	4.如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
		$ git tag -d v0.9
	  然后，从远程删除。删除命令也是push，但是格式如下：
		$ git push origin :refs/tags/v0.9
小结:	1.命令git push origin <tagname>可以推送一个本地标签；
		2.命令git push origin --tags可以推送全部未推送过的本地标签；
		3.命令git tag -d <tagname>可以删除一个本地标签；
		4.命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
18.使用GitHub
	1.在GitHub上，可以任意Fork开源仓库；
	2.自己拥有Fork后的仓库的读写权限；
	3.可以推送pull request给官方仓库来贡献代码。
19.自定义Git
	1.忽略特殊文件
		在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
	2.忽略某些文件时，需要编写.gitignore
	3..gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理
20.配置别名
	略
21.搭建Git服务器
	略

